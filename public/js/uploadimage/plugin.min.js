!function() {
  tinymce.PluginManager.requireLangPack("uploadimage");
  tinymce.create("tinymce.plugins.UploadImage", {
    /**
     * @param {Object} editor
     * @param {string} dataAndEvents
     * @return {undefined}
     */
    UploadImage : function(editor, dataAndEvents) {
      /**
       * @return {undefined}
       */
      function init() {
        self = ed.windowManager.open({
          title : editor.translate("Insert an image from your computer"),
          width : 500 + parseInt(ed.getLang("uploadimage.delta_width", 0), 10),
          height : 180 + parseInt(ed.getLang("uploadimage.delta_height", 0), 10),
          body : [{
            type : "iframe",
            url : "javascript:void(0)"
          }, {
            type : "textbox",
            name : "file",
            label : editor.translate("Choose an image"),
            subtype : "file"
          }, {
            type : "textbox",
            name : "alt",
            label : editor.translate("Image description")
          }, {
            type : "textbox",
            name : "width",
            label : "width"
          },{
            type : "container",
            classes : "error",
            html : "<p style='color: #b94a48;'>&nbsp;</p>"
          }, {
            type : "container",
            classes : "throbber"
          }],
          buttons : [{
            text : editor.translate("Insert"),
            /** @type {function (): ?} */
            onclick : handler,
            subtype : "primary"
          }, {
            text : editor.translate("Cancel"),
            onclick : editor.windowManager.close
          }]
        }, {
          plugin_url : dataAndEvents
        });
        self.off("submit");
        self.on("submit", handler);
        t = self.find("iframe")[0];
        form = createElement("form", {
          action : editor.getParam("uploadimage_form_url", "/tinymce_assets"),
          target : t._id,
          method : "POST",
          enctype : "multipart/form-data",
          accept_charset : "UTF-8"
        });
        t.getEl().name = t._id;
        form.appendChild(createElement("input", {
          type : "hidden",
          name : "utf8",
          value : "\u2713"
        }));
        form.appendChild(createElement("input", {
          type : "hidden",
          name : "authenticity_token",
          value : read("csrf-token")
        }));
        form.appendChild(createElement("input", {
          type : "hidden",
          name : "hint",
          value : editor.getParam("uploadimage_hint", "")
        }));
        var container = self.getEl();
        /** @type {(HTMLElement|null)} */
        var root = document.getElementById(container.id + "-body");
        /** @type {NodeList} */
        var codeSegments = root.getElementsByClassName("mce-container");
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          form.appendChild(codeSegments[i]);
        }
        var resultItems = form.getElementsByTagName("input");
        /** @type {number} */
        i = 0;
        for (;i < resultItems.length;i++) {
          var result = resultItems[i];
          if ("input" == result.tagName.toLowerCase()) {
            if ("hidden" != result.type) {
              if ("file" == result.type) {
                /** @type {string} */
                result.name = "file";
                tinymce.DOM.setStyles(result, {
                  border : 0,
                  boxShadow : "none",
                  webkitBoxShadow : "none"
                });
              } else {
                /** @type {string} */
                result.name = "alt";
              }
            }
          }
        }
        root.appendChild(form);
      }
      /**
       * @return {?}
       */
      function handler() {
        if ("" == get("file")) {
          return show("You must choose a file");
        }
        loading = new top.tinymce.ui.Throbber(self.getEl());
        loading.show();
        done();
        var node = t.getEl();
        if (node.attachEvent) {
          node.detachEvent("onload", cb);
          node.attachEvent("onload", cb);
        } else {
          node.removeEventListener("load", cb);
          node.addEventListener("load", cb, false);
        }
        form.submit();
      }
      /**
       * @return {undefined}
       */
      function cb() {
        if (loading) {
          loading.hide();
        }
        var iframe = t.getEl();
        if (iframe.document || iframe.contentDocument) {
          var iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
          success(iframeDoc.getElementsByTagName("body")[0].innerHTML);
        } else {
          show("Didn't get a response from the server");
        }
      }
      /**
       * @param {?} feed
       * @return {undefined}
       */
      function success(feed) {
        try {
          var data = tinymce.util.JSON.parse(feed);
          if (data.error) {
            show(data.error.message);
          } else {
            editor.execCommand("mceInsertContent", false, render(data));
            editor.windowManager.close();
          }
        } catch (d) {
          show("Got a bad response from the server");
        }
      }
      /**
       * @return {undefined}
       */
      function done() {
        var doc = self.find(".error")[0].getEl();
        if (doc) {
          /** @type {string} */
          doc.getElementsByTagName("p")[0].innerHTML = "&nbsp;";
        }
      }
      /**
       * @param {string} content
       * @return {undefined}
       */
      function show(content) {
        var doc = self.find(".error")[0].getEl();
        if (doc) {
          doc.getElementsByTagName("p")[0].innerHTML = editor.translate(content);
        }
      }
      /**
       * @param {string} type
       * @param {?} inAttrs
       * @return {?}
       */
      function createElement(type, inAttrs) {
        /** @type {Element} */
        var tag = document.createElement(type);
        var i;
        for (i in inAttrs) {
          if (!(inAttrs[i] instanceof Function)) {
            tag[i] = inAttrs[i];
          }
        }
        return tag;
      }
      /**
       * @param {Object} target
       * @return {?}
       */
      function render(target) {
        var base = editor.getParam("uploadimage_default_img_class", "");
        var storage = get("alt");
        /** @type {string} */
        var e = "<img src='" + target.image.url + "'";
        return "" != base && (e += " class='" + base + "'"), target.image.height && (e += " height='" + target.image.height + "'"), target.image.width && (e += " width='" + target.image.width + "'"), e += " alt='" + storage + "'/>";
      }
      /**
       * @param {string} key
       * @return {?}
       */
      function get(key) {
        var attrs = form.getElementsByTagName("input");
        var attr;
        for (attr in attrs) {
          if (attrs[attr].name == key) {
            return attrs[attr].value;
          }
        }
        return "";
      }
      /**
       * @param {string} name
       * @return {?}
       */
      function read(name) {
        /** @type {NodeList} */
        var files = document.getElementsByTagName("meta");
        var file;
        for (file in files) {
          if (files[file].name == name) {
            return files[file].content;
          }
        }
        return null;
      }
      var form;
      var t;
      var self;
      var loading;
      /** @type {Object} */
      var ed = editor;
      ed.addButton("uploadimage", {
        tooltip : editor.translate("Insert an image from your computer"),
        icon : "image",
        /** @type {function (): undefined} */
        onclick : init
      });
      ed.addMenuItem("uploadimage", {
        text : editor.translate("Insert an image from your computer"),
        icon : "image",
        context : "insert",
        /** @type {function (): undefined} */
        onclick : init
      });
    }
  });
  tinymce.PluginManager.add("uploadimage", tinymce.plugins.UploadImage);
}();
